/*
 * This file is generated by jOOQ.
 */
package hackathon.generation.tool.model.tables.records;


import hackathon.generation.tool.model.tables.ForeignKeysViewTable;

import org.jooq.Field;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ForeignKeysViewRecord extends TableRecordImpl<ForeignKeysViewRecord> implements Record7<String, String, String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.foreign_keys_view.table_schema</code>.
     */
    public void setTableSchema(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.foreign_keys_view.table_schema</code>.
     */
    public String getTableSchema() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.foreign_keys_view.constraint_name</code>.
     */
    public void setConstraintName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.foreign_keys_view.constraint_name</code>.
     */
    public String getConstraintName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.foreign_keys_view.table_name</code>.
     */
    public void setTableName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.foreign_keys_view.table_name</code>.
     */
    public String getTableName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.foreign_keys_view.column_name</code>.
     */
    public void setColumnName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.foreign_keys_view.column_name</code>.
     */
    public String getColumnName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.foreign_keys_view.foreign_table_schema</code>.
     */
    public void setForeignTableSchema(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.foreign_keys_view.foreign_table_schema</code>.
     */
    public String getForeignTableSchema() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.foreign_keys_view.foreign_table_name</code>.
     */
    public void setForeignTableName(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.foreign_keys_view.foreign_table_name</code>.
     */
    public String getForeignTableName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.foreign_keys_view.foreign_column_name</code>.
     */
    public void setForeignColumnName(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.foreign_keys_view.foreign_column_name</code>.
     */
    public String getForeignColumnName() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, String, String, String, String, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ForeignKeysViewTable.FOREIGN_KEYS_VIEW.TABLE_SCHEMA;
    }

    @Override
    public Field<String> field2() {
        return ForeignKeysViewTable.FOREIGN_KEYS_VIEW.CONSTRAINT_NAME;
    }

    @Override
    public Field<String> field3() {
        return ForeignKeysViewTable.FOREIGN_KEYS_VIEW.TABLE_NAME;
    }

    @Override
    public Field<String> field4() {
        return ForeignKeysViewTable.FOREIGN_KEYS_VIEW.COLUMN_NAME;
    }

    @Override
    public Field<String> field5() {
        return ForeignKeysViewTable.FOREIGN_KEYS_VIEW.FOREIGN_TABLE_SCHEMA;
    }

    @Override
    public Field<String> field6() {
        return ForeignKeysViewTable.FOREIGN_KEYS_VIEW.FOREIGN_TABLE_NAME;
    }

    @Override
    public Field<String> field7() {
        return ForeignKeysViewTable.FOREIGN_KEYS_VIEW.FOREIGN_COLUMN_NAME;
    }

    @Override
    public String component1() {
        return getTableSchema();
    }

    @Override
    public String component2() {
        return getConstraintName();
    }

    @Override
    public String component3() {
        return getTableName();
    }

    @Override
    public String component4() {
        return getColumnName();
    }

    @Override
    public String component5() {
        return getForeignTableSchema();
    }

    @Override
    public String component6() {
        return getForeignTableName();
    }

    @Override
    public String component7() {
        return getForeignColumnName();
    }

    @Override
    public String value1() {
        return getTableSchema();
    }

    @Override
    public String value2() {
        return getConstraintName();
    }

    @Override
    public String value3() {
        return getTableName();
    }

    @Override
    public String value4() {
        return getColumnName();
    }

    @Override
    public String value5() {
        return getForeignTableSchema();
    }

    @Override
    public String value6() {
        return getForeignTableName();
    }

    @Override
    public String value7() {
        return getForeignColumnName();
    }

    @Override
    public ForeignKeysViewRecord value1(String value) {
        setTableSchema(value);
        return this;
    }

    @Override
    public ForeignKeysViewRecord value2(String value) {
        setConstraintName(value);
        return this;
    }

    @Override
    public ForeignKeysViewRecord value3(String value) {
        setTableName(value);
        return this;
    }

    @Override
    public ForeignKeysViewRecord value4(String value) {
        setColumnName(value);
        return this;
    }

    @Override
    public ForeignKeysViewRecord value5(String value) {
        setForeignTableSchema(value);
        return this;
    }

    @Override
    public ForeignKeysViewRecord value6(String value) {
        setForeignTableName(value);
        return this;
    }

    @Override
    public ForeignKeysViewRecord value7(String value) {
        setForeignColumnName(value);
        return this;
    }

    @Override
    public ForeignKeysViewRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ForeignKeysViewRecord
     */
    public ForeignKeysViewRecord() {
        super(ForeignKeysViewTable.FOREIGN_KEYS_VIEW);
    }

    /**
     * Create a detached, initialised ForeignKeysViewRecord
     */
    public ForeignKeysViewRecord(String tableSchema, String constraintName, String tableName, String columnName, String foreignTableSchema, String foreignTableName, String foreignColumnName) {
        super(ForeignKeysViewTable.FOREIGN_KEYS_VIEW);

        setTableSchema(tableSchema);
        setConstraintName(constraintName);
        setTableName(tableName);
        setColumnName(columnName);
        setForeignTableSchema(foreignTableSchema);
        setForeignTableName(foreignTableName);
        setForeignColumnName(foreignColumnName);
    }

    /**
     * Create a detached, initialised ForeignKeysViewRecord
     */
    public ForeignKeysViewRecord(hackathon.generation.tool.model.tables.pojos.ForeignKeysView value) {
        super(ForeignKeysViewTable.FOREIGN_KEYS_VIEW);

        if (value != null) {
            setTableSchema(value.getTableSchema());
            setConstraintName(value.getConstraintName());
            setTableName(value.getTableName());
            setColumnName(value.getColumnName());
            setForeignTableSchema(value.getForeignTableSchema());
            setForeignTableName(value.getForeignTableName());
            setForeignColumnName(value.getForeignColumnName());
        }
    }
}
